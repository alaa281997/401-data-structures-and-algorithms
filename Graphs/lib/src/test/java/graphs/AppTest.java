/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.java.graphs;

import main.java.graphs.Graph;
import org.junit.Test;

import javax.management.StringValueExp;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;


public class AppTest {

    @Test
    public void addVertex(){

        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");

        assertNotNull(graph.getVertices());
        assertEquals(2,graph.size());
    }

    @Test
    public void addEdge(){

        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addEdge("A", "B");

        assertEquals("Vertex{label='A'}[Vertex{label='B'}]Vertex{label='B'}[Vertex{label='A'}]", graph.printGraph());
    }

    @Test
    public void vertexNeighbors(){

        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D")
        ;
        graph.addEdge("A", "C");
        graph.addEdge("A", "B");
        graph.addEdge("C", "B");

        assertEquals("[Vertex{label='C'}, Vertex{label='B'}]",graph.getNeighbors("A").toString());
        assertEquals("[Vertex{label='A'}, Vertex{label='B'}]", graph.getNeighbors("C").toString());

    }


    @Test
    public void emptyGraph(){

        Graph graph = new Graph();
        assertEquals(0,graph.size());
        assertEquals("[]", graph.getVertices().toString());
    }

    @Test
    public void removeVertex(){

        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("D");
        graph.addEdge("A", "D");
        assertEquals("Vertex{label='A'}[Vertex{label='D'}]Vertex{label='D'}[Vertex{label='A'}]",graph.printGraph());
        assertEquals(2, graph.size());

        graph.removeVertex("A");
        assertEquals("Vertex{label='D'}[]",graph.printGraph());
        assertEquals(1, graph.size());
    }
    @Test
    public void oneVertexAndOneEdge(){
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.removeEdge("A","A");

        assertEquals("Vertex{label='A'}[]",graph.printGraph());
    }

    @Test
    public void removeEdge(){
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("D");
        graph.addEdge("A", "D");
        assertEquals("Vertex{label='A'}[Vertex{label='D'}]Vertex{label='D'}[Vertex{label='A'}]",graph.printGraph());

        graph.removeEdge("D", "A");
        assertEquals("Vertex{label='A'}[]Vertex{label='D'}[]", graph.printGraph());
    }

    @Test
    public void TestBreadthFirst(){

        Graph graph = new Graph();

        graph.addVertex("Pandora");
        graph.addVertex("Arendelle");
        graph.addVertex("Metroville");
        graph.addVertex("Monstroplolis");
        graph.addVertex("Narnia");
        graph.addVertex("Naboo");

        graph.addEdge("Pandora", "Arendelle");
        graph.addEdge("Arendelle", "Metroville");
        graph.addEdge("Arendelle", "Monstroplolis");
        graph.addEdge("Metroville", "Narnia");
        graph.addEdge("Metroville", "Naboo");
        graph.addEdge("Metroville", "Monstroplolis");
        graph.addEdge("Monstroplolis", "Naboo");
        graph.addEdge("Narnia", "Naboo");

        assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]", graph.breadthTraverse("Pandora").toString());
    }

    @Test
    public void businessTripTest(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 100);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",150);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",200);

        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Arendelle");
        assertEquals("100", String.valueOf(graph2.businessTrip(graph2, cities1)));

        List<String> cities2 = new ArrayList<>();
        cities2.add("Pandora");
        cities2.add("Arendelle");
        cities2.add("Monstroplolis");
        assertEquals("300", String.valueOf(graph2.businessTrip(graph2, cities2)));

    }
}

