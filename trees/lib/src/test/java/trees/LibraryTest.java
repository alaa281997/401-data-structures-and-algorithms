/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.java.trees;

import main.java.trees.BinaryTree;
import main.java.trees.Node;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.Assert.*;

public class LibraryTest {
    BinaryTree bt = new BinaryTree();
    @Test
    public void TestEmptyTree() {
        assertEquals("BinaryTree{Root=null}",bt.toString());
    }

    @Test
    public void TestSingleRoot() {
        bt.setRoot(new Node(5));
        assertEquals("BinaryTree{Root=Node{key=5}LeftnullRightnull}",bt.toString());
    }
    @Test
    public void TestChild() {
        bt.setRoot(new Node(5));
        bt.getRoot().setLeft(new Node(2));
        bt.getRoot().setRight(new Node(3));
        assertEquals("BinaryTree{Root=Node{key=5}LeftNode{key=2}RightNode{key=3}}",bt.toString());
    }
    @Test
    public void TestPreOrder() {
        bt.setRoot(new Node(1));
        bt.getRoot().setLeft(new Node(2));
        bt.getRoot().setRight(new Node(3));
        bt.getRoot().getLeft().setLeft(new Node(4));
        bt.getRoot().getLeft().setRight(new Node(5));
        bt.preOrder(bt.getRoot());
        assertEquals("[1, 2, 4, 5, 3]",String.valueOf(bt.getPreOrderArr()));
    }

    @Test
    public void TestPostOrder() {
        bt.setRoot(new Node(1));
        bt.getRoot().setLeft(new Node(2));
        bt.getRoot().setRight(new Node(3));
        bt.getRoot().getLeft().setLeft(new Node(4));
        bt.getRoot().getLeft().setRight(new Node(5));
        bt.postOrder(bt.getRoot());
        assertEquals("[4, 5, 2, 3, 1]",String.valueOf(bt.getPostOrderArr()));
    }
    @Test
    public void TestInOrder() {
        bt.setRoot(new Node(1));
        bt.getRoot().setLeft(new Node(2));
        bt.getRoot().setRight(new Node(3));
        bt.getRoot().getLeft().setLeft(new Node(4));
        bt.getRoot().getLeft().setRight(new Node(5));
        bt.inOrder(bt.getRoot());
        assertEquals("[4, 2, 5, 1, 3]",String.valueOf(bt.getInOrderArr()));
    }

    @Test
    public void findMaxTest() {
        BinaryTree binaryTree = new BinaryTree();
        binaryTree.setRoot(new Node(1));
        binaryTree.getRoot().setLeft(new Node(190));
        binaryTree.getRoot().setRight(new Node(130));
        binaryTree.getRoot().getLeft().setLeft(new Node(4));
        binaryTree.getRoot().getLeft().setRight(new Node(200));

        assertEquals("200",String.valueOf(binaryTree.findMax()));
    }
}
