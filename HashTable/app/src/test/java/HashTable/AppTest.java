/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.java.HashTable;

import main.java.HashTable.HashTable;
import main.java.HashTable.HashTree.BinaryTree;
import main.java.HashTable.HashTree.NodeItem;
import org.junit.Test;

import static main.java.HashTable.FirstRepeated.findFirstRepeated;
import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void TestContainsEmpty() {
        HashTable<String, Integer> hashList = new HashTable<>();
        assertTrue(hashList.isEmpty());
    }

    @Test
    public void TestContains() {
        HashTable<String, Integer> hashList = new HashTable<>();
        hashList.add("A",1);
        assertTrue(hashList.contains("A"));
    }

    @Test
    public void TestGetSize() {
        HashTable<String, Integer> hashList = new HashTable<>();

        hashList.add("A",1);
        assertEquals(1,hashList.getSize());

        hashList.add("B", 2);
        assertEquals(2,hashList.getSize());

    }


    @Test
    public void TestRepeated() {
        String string="It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York...";
        assertEquals("summer",findFirstRepeated(string));
    }
    @Test
    public void TestNotRepeated() {
        String string="The Capital city of Jordan is Amman";
        assertEquals("Not Repeated",findFirstRepeated(string));
    }

    @Test
    public void TestIntersectionTree(){

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();
        BinaryTree binaryTree1 = new BinaryTree();
        BinaryTree binaryTree2 = new BinaryTree();

        binaryTree1.setRoot(new NodeItem(150));
        binaryTree1.getRoot().setLeft(new NodeItem(100));
        binaryTree1.getRoot().setRight(new NodeItem(250));
        binaryTree1.getRoot().getRight().setLeft(new NodeItem(200));
        binaryTree1.getRoot().getRight().setRight(new NodeItem(350));

        binaryTree2.setRoot(new NodeItem(42));
        binaryTree2.getRoot().setLeft(new NodeItem(100));
        binaryTree2.getRoot().setRight(new NodeItem(600));
        binaryTree2.getRoot().getRight().setLeft(new NodeItem(200));
        binaryTree2.getRoot().getRight().setRight(new NodeItem(350));

        assertEquals("[100, 200, 350]", binaryTree1.treeIntersection(binaryTree1,binaryTree2).toString());

    }
}

