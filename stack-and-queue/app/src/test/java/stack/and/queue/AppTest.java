/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.java.stack.and.queue;

import main.java.stack.and.queue.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    StackLinkedList<Integer> testStack = new StackLinkedList<>();
    QueueLinkedList<Integer> testQueue = new QueueLinkedList<>();
    pseudoQueue<Integer> testPseudoQueue = new pseudoQueue<>();
    AnimalShelter animalShelter = new AnimalShelter();
    @Test
    public void testStackPush() {
    testStack.push(1);
    testQueue.enqueue(1);
    assertEquals("Error with Stack Insertion:\n ", "{ 1 } -> NULL", String.valueOf(testStack));
}


    @Test
    public void testMultiplePush() {
        testStack.push(1);
        testStack.push(2);
        testStack.push(3);
        testStack.push(4);
        testQueue.enqueue(1);
        assertEquals(
                "Error with Stack Insertion:\n ",
                "{ 4 } -> { 3 } -> { 2 } -> { 1 } -> NULL",
                String.valueOf(testStack)
        );
    }

    @Test
    public void testPop() {
        testStack.push(1);
        testStack.pop();
        assertEquals("Error with Stack Insertion:\n ", "NUll", String.valueOf(testStack));
    }

    @Test
    public void testMultiplePop() {
        testStack.push(1);
        testStack.push(2);
        testStack.push(3);
        testStack.push(4);
        testStack.pop();
        testStack.pop();
        testStack.pop();
        testStack.pop();
        assertEquals("Error with Stack Insertion:\n ", "NUll", String.valueOf(testStack));
    }

    @Test
    public void testStackPeek() {
        testStack.push(1);
        testStack.push(2);
        assertEquals(
                "Error with Stack peek:\n ",
                2,
                testStack.peek()
        );

    }

    @Test
    public void testStackPeekEmpty() {
        assertEquals(
                "Error with peek on empty:\n ",
                -2147483648,
                testStack.peek()
        );
    }
    @Test
    public void testEnqueue() {
        testQueue.enqueue(1);
        assertEquals("Error add to queue:\n ", "{ 1 } -> NULL", String.valueOf(testQueue));
    }

    @Test
    public void testMultipleInsert() {
        testQueue.enqueue(1);
        testQueue.enqueue(2);
        testQueue.enqueue(3);
        testQueue.enqueue(4);
        assertEquals(
                "Error add multiple values to queue:\n ", "{ 1 } -> { 2 } -> { 3 } -> { 4 } -> NULL", String.valueOf(testQueue) );
    }

    @Test
    public void testDequeue() {
        testQueue.enqueue(1);
        testQueue.dequeue();
        assertEquals("Error delete from queue:\n ", "NUll", String.valueOf(testStack));
    }

    @Test
    public void testMultipleDequeue() {
        testQueue.enqueue(1);
        testQueue.enqueue(2);
        testQueue.enqueue(3);
        testQueue.enqueue(4);
        testQueue.dequeue();
        testQueue.dequeue();
        testQueue.dequeue();
        testQueue.dequeue();
        assertEquals("Error delete multiple values:\n ", "NUll", String.valueOf(testStack));
    }

//    @Test
//    public void testQueuePeek() {
//        testQueue.enqueue(1);
//        testQueue.enqueue(2);
//        assertEquals("1", testQueue.peek());
//
//    }

    @Test
    public void testQueuePeekEmpty() {
        assertEquals(
                "Error queue peek on empty:\n ",
                -2147483648,
                testStack.peek()
        );
    }

    @Test
    public void testHappyPath() {
        testPseudoQueue.enqueue(1);
        testPseudoQueue.enqueue(2);
        testPseudoQueue.enqueue(3);
        testPseudoQueue.enqueue(4);
        assertEquals(
                "Error adding in queue:\n ","{ 4 } -> { 3 } -> { 2 } -> { 1 } -> NULL", String.valueOf(testPseudoQueue)
        );
    }

    @Test
    public void testError() {
        assertEquals("Error Empty delete:\n ", 0,testPseudoQueue.dequeue());

        testPseudoQueue.dequeue();
        testPseudoQueue.dequeue();

    }

    @Test
    public void testEdge() {

        testPseudoQueue.enqueue(5);
        assertEquals(
                "Error enq:\n ",
                "{ 5 } -> NULL",
                String.valueOf(testPseudoQueue) );
        testPseudoQueue.dequeue();

    }

    @Test
    public void TestCatEnqueueShelter() {
        animalShelter.enqueue(new Cat("cat1"));
        animalShelter.enqueue(new Cat("cat2"));
        animalShelter.enqueue(new Cat("cat3"));
        assertEquals("AnimalShelter{{ catQueue={ cat1 } -> { cat2 } -> { cat3 } -> NULL} ,{ dogQueue=empty queue}",animalShelter.toString());
    }

    @Test
    public void TestDogEnqueueShelter() {
        animalShelter.enqueue(new Dog("Dog1"));
        animalShelter.enqueue(new Dog("Dog2"));
        animalShelter.enqueue(new Dog("Dog3"));
        assertEquals("AnimalShelter{{ catQueue=empty queue} ,{ dogQueue={ Dog1 } -> { Dog2 } -> { Dog3 } -> NULL}",animalShelter.toString());
    }
    @Test
    public void TestCatDequeueShelter() {
        animalShelter.enqueue(new Cat("cat1"));
        animalShelter.dequeue("cat");
        assertEquals("AnimalShelter{{ catQueue=empty queue} ,{ dogQueue=empty queue}",animalShelter.toString());
    }

    @Test
    public void TestDogDequeueShelter() {
        animalShelter.enqueue(new Dog("dog1"));
        animalShelter.dequeue("dog");
        assertEquals("AnimalShelter{{ catQueue=empty queue} ,{ dogQueue=empty queue}",animalShelter.toString());
    }
}